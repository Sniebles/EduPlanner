/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package core.view;

import core.model.Graph;
import core.model.Node;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

/**
 *
 * @author scues
 */
public class JGraph extends javax.swing.JPanel {

    private Graph graph;
    private final Map<Integer, Color> colors = new HashMap<>();

    /**
     * Creates new form JGraph
     */
    public JGraph() {
        initComponents();
        colors.put(0, Color.GRAY);
    }

    public void setGraph(Graph graph) {
        this.graph = graph;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (graph == null || graph.nodes.isEmpty()) {
            return;
        }

        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        int radius = 20;
        int panelWidth = getWidth();
        int panelHeight = getHeight();

        // Layout automático si no hay posiciones: colocar nodos en círculo
        Map<Node, Point> positions = new HashMap<>();
        int n = graph.nodes.size();
        int i = 0;

        for (Node node : graph.nodes.values()) {
            double angle = 2 * Math.PI * i / n;
            int x = (int) (panelWidth / 2 + 200 * Math.cos(angle));
            int y = (int) (panelHeight / 2 + 200 * Math.sin(angle));
            positions.put(node, new Point(x, y));
            i++;
        }

        // Dibujar aristas
        g2.setStroke(new BasicStroke(2));
        g2.setColor(Color.BLACK);
        for (Node node : graph.nodes.values()) {
            Point p1 = positions.get(node);
            for (Node neighbor : node.adj) {
                Point p2 = positions.get(neighbor);
                if (p2 != null) {
                    g2.drawLine(p1.x, p1.y, p2.x, p2.y);
                }
            }
        }

        // Dibujar nodos
        for (Map.Entry<Node, Point> entry : positions.entrySet()) {
            Node node = entry.getKey();
            Point p = entry.getValue();

            Color fillColor;
            if (colors.containsKey(node.color)) {
                fillColor = colors.get(node.color);
            } else {
                Color temp = new Color(new Random().nextInt(0x1000000));
                colors.put(node.color, temp);
                fillColor = temp;
            }
            g2.setColor(fillColor);
            g2.fillOval(p.x - radius, p.y - radius, 2 * radius, 2 * radius);
            g2.setColor(Color.BLACK);
            g2.drawOval(p.x - radius, p.y - radius, 2 * radius, 2 * radius);
        }

        int j = 1;
        for (int key : colors.keySet()) {
            if (key != 0) {
                g2.setColor(colors.get(key));
                g2.fillOval(10, 15 * j + 10, 10, 10);

                g2.setColor(Color.BLACK);
                g2.drawOval(10, 15 * j + 10, 10, 10);
                g2.drawString(j + "", 20, 15 * j + 10);
                j++;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
